<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.velvol.hr.domain.Preworker" table="preworker" >
        <id name="id" type="java.lang.String">
            <column name="id" length="32" />
            <generator class="uuid" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="name" length="20" />
        </property>
        <property name="sex" type="java.lang.String">
            <column name="sex" length="20" />
        </property>
        <property name="cardid" type="java.lang.String">
            <column name="cardid" length="20" />
        </property>
         <property name="telephone" type="java.lang.String">
            <column name="telephone" length="20" />
        </property> 
        
        <!-- 日期类型 -->    
        <property name="predate" type="java.util.Date">
            <column name="predate" length="0" />
        </property> 
        <!-- 整数类型 -->    
        <property name="type" />
        <!-- 时间戳类型 -->
         <property name="reqtime" type="java.sql.Timestamp">
            <column name="reqtime" length="0" not-null="true" />
        </property>
        
        <property name="referee" type="java.lang.String">
            <column name="referee" length="20" />
        </property>        
        <property name="getstate" />
        <property name="initstate" />
        <property name="hascar" />
        <property name="picpath" type="java.lang.String">
            <column name="picpath" length="200" />
        </property>  
        <property name="picpathlzd" type="java.lang.String">
            <column name="picpathlzd" length="200" />
        </property>  
        <property name="state" />
        <property name="faildesc" type="java.lang.String">
            <column name="faildesc" length="200" />
        </property> 
        
        <property name="infofrom" type="java.lang.String">
            <column name="infofrom" length="20" />
        </property>
        <property name="yhcard" type="java.lang.String">
            <column name="yhcard" length="20" />
        </property>
        <property name="yhperson" type="java.lang.String">
            <column name="yhperson" length="20" />
        </property>
        <property name="yhfrom" type="java.lang.String">
            <column name="yhfrom" length="20" />
        </property>
        
        <!-- 实际报到日期 -->    
        <property name="baodaodate" type="java.util.Date">
            <column name="baodaodate" length="0" />
        </property>
        
        <property name="meituanid" type="java.lang.String">
            <column name="meituanid" length="100" />
        </property> 
        
        <property name="indate" type="java.util.Date">
            <column name="indate" length="0" />
        </property>
        
        <property name="testresult" />   
        
         <one-to-one name="initinfo" class="com.velvol.hr.domain.Initinfo" property-ref="preworker" lazy="false">
         </one-to-one>
         
       	<many-to-one name="region" class="com.velvol.hr.domain.Region" column="region_id" lazy="false">
       	</many-to-one> 
       	<many-to-one name="station" class="com.velvol.hr.domain.Station" column="station_id" lazy="false">
       	</many-to-one> 
          
          <property name="deltag" />    
          
          <!-- materials属性，set集合，表达的是本类与Material的一对多的关系
             class：关联的实体类型
             key子元素：对方表的外键列
             可以单向关联，也可以双向关联
         -->   
      <!--    <set name="materials" lazy="true">
          <key column="preworkerid"></key>
          <one-to-many class="com.velvol.hr.domain.Material"  />
        </set>
        -->         
      
    </class>
    
    <!-- 预注册删除逻辑 -->
     <query name="preworker.delete">
    	delete from	Preworker  WHERE id = ?
    </query>
    <!-- 预注册黑名单 -->
    <query name="preworker.black">
    	UPDATE 	Preworker SET state = -1 WHERE id = ?
    </query>
    <!-- 预注册更新状态逻辑 -->
    <query name="preworker.state">
    	UPDATE 	Preworker SET state = 1 WHERE id = ?
    </query>
</hibernate-mapping>
